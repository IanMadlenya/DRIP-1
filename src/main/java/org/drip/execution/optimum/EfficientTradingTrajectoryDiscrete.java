
package org.drip.execution.optimum;

/*
 * -*- mode: java; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 */

/*!
 * Copyright (C) 2017 Lakshmi Krishnamurthy
 * Copyright (C) 2016 Lakshmi Krishnamurthy
 * 
 *  This file is part of DRIP, a free-software/open-source library for buy/side financial/trading model
 *  	libraries targeting analysts and developers
 *  	https://lakshmidrip.github.io/DRIP/
 *  
 *  DRIP is composed of four main libraries:
 *  
 *  - DRIP Fixed Income - https://lakshmidrip.github.io/DRIP-Fixed-Income/
 *  - DRIP Asset Allocation - https://lakshmidrip.github.io/DRIP-Asset-Allocation/
 *  - DRIP Numerical Optimizer - https://lakshmidrip.github.io/DRIP-Numerical-Optimizer/
 *  - DRIP Statistical Learning - https://lakshmidrip.github.io/DRIP-Statistical-Learning/
 * 
 *  - DRIP Fixed Income: Library for Instrument/Trading Conventions, Treasury Futures/Options,
 *  	Funding/Forward/Overnight Curves, Multi-Curve Construction/Valuation, Collateral Valuation and XVA
 *  	Metric Generation, Calibration and Hedge Attributions, Statistical Curve Construction, Bond RV
 *  	Metrics, Stochastic Evolution and Option Pricing, Interest Rate Dynamics and Option Pricing, LMM
 *  	Extensions/Calibrations/Greeks, Algorithmic Differentiation, and Asset Backed Models and Analytics.
 * 
 *  - DRIP Asset Allocation: Library for model libraries for MPT framework, Black Litterman Strategy
 *  	Incorporator, Holdings Constraint, and Transaction Costs.
 * 
 *  - DRIP Numerical Optimizer: Library for Numerical Optimization and Spline Functionality.
 * 
 *  - DRIP Statistical Learning: Library for Statistical Evaluation and Machine Learning.
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *   	you may not use this file except in compliance with the License.
 *   
 *  You may obtain a copy of the License at
 *  	http://www.apache.org/licenses/LICENSE-2.0
 *  
 *  Unless required by applicable law or agreed to in writing, software
 *  	distributed under the License is distributed on an "AS IS" BASIS,
 *  	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  
 *  See the License for the specific language governing permissions and
 *  	limitations under the License.
 */

/**
 * EfficientTradingTrajectoryDiscrete contains the Discrete Trading Trajectory generated by a given Optimal
 *  Trajectory Generation Scheme. Schemes may be Numerical or Closed Form. The References are:
 * 
 * 	- Almgren, R., and N. Chriss (1999): Value under Liquidation, Risk 12 (12).
 * 
 * 	- Almgren, R., and N. Chriss (2000): Optimal Execution of Portfolio Transactions, Journal of Risk 3 (2)
 * 		5-39.
 * 
 * 	- Bertsimas, D., and A. W. Lo (1998): Optimal Control of Execution Costs, Journal of Financial Markets,
 * 		1, 1-50.
 *
 * 	- Chan, L. K. C., and J. Lakonishak (1995): The Behavior of Stock Prices around Institutional Trades,
 * 		Journal of Finance, 50, 1147-1174.
 *
 * 	- Keim, D. B., and A. Madhavan (1997): Transaction Costs and Investment Style: An Inter-exchange
 * 		Analysis of Institutional Equity Trades, Journal of Financial Economics, 46, 265-292.
 * 
 * @author Lakshmi Krishnamurthy
 */

public class EfficientTradingTrajectoryDiscrete extends org.drip.execution.strategy.DiscreteTradingTrajectory
	implements org.drip.execution.optimum.EfficientTradingTrajectory {
	private double _dblMarketPower = java.lang.Double.NaN;
	private double _dblTransactionCostVariance = java.lang.Double.NaN;
	private double _dblTransactionCostExpectation = java.lang.Double.NaN;

	/**
	 * Construct a Standard EfficientTradingTrajectoryDiscrete Instance
	 * 
	 * @param adblExecutionTimeNode Array containing the Trajectory Time Nodes
	 * @param adblHoldings Array containing the Holdings
	 * @param apep The Arithmetic Price Walk Evolution Parameters
 * 
	 * @return The EfficientTradingTrajectoryDiscrete Instance
	 */

	public static EfficientTradingTrajectoryDiscrete Standard (
		final double[] adblExecutionTimeNode,
		final double[] adblHoldings,
		final org.drip.execution.dynamics.ArithmeticPriceEvolutionParameters apep)
	{
		if (null == apep) return null;

		org.drip.execution.strategy.DiscreteTradingTrajectory dtt =
			org.drip.execution.strategy.DiscreteTradingTrajectory.Standard (adblExecutionTimeNode,
				adblHoldings);

		if (null == dtt) return null;

		double dblExecutionTime = dtt.executionTime();

		try {
			org.drip.measure.gaussian.R1UnivariateNormal r1un = (new
				org.drip.execution.capture.TrajectoryShortfallEstimator (dtt)).totalCostDistributionSynopsis
					(apep);

			return null == r1un ? null : new EfficientTradingTrajectoryDiscrete (adblExecutionTimeNode,
				adblHoldings, dtt.tradeList(), r1un.mean(), r1un.variance(),
					apep.temporaryExpectation().epochImpactFunction().evaluate (dtt.tradeSize(),
						dblExecutionTime) / (apep.arithmeticPriceDynamicsSettings().epochVolatility() *
							java.lang.Math.sqrt (dblExecutionTime)));
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	/**
	 * EfficientTradingTrajectoryDiscrete Constructor
	 * 
	 * @param adblExecutionTimeNode Array containing the Trajectory Time Nodes
	 * @param adblHoldings Array containing the Holdings
	 * @param adblTradeList Array containing the Trade List
	 * @param dblTransactionCostExpectation The Expected Transaction Cost
	 * @param dblTransactionCostVariance The Variance of the Transaction Cost
	 * @param dblMarketPower The Dimension-less Relative Market Impact
	 * 
	 * @throws java.lang.Exception Thrown if the Inputs are Invalid
	 */

	public EfficientTradingTrajectoryDiscrete (
		final double[] adblExecutionTimeNode,
		final double[] adblHoldings,
		final double[] adblTradeList,
		final double dblTransactionCostExpectation,
		final double dblTransactionCostVariance,
		final double dblMarketPower)
		throws java.lang.Exception
	{
		super (adblExecutionTimeNode, adblHoldings, adblTradeList);

		if (!org.drip.quant.common.NumberUtil.IsValid (_dblTransactionCostExpectation =
			dblTransactionCostExpectation) || !org.drip.quant.common.NumberUtil.IsValid
				(_dblTransactionCostVariance = dblTransactionCostVariance) ||
					!org.drip.quant.common.NumberUtil.IsValid (_dblMarketPower = dblMarketPower))
			throw new java.lang.Exception
				("EfficientTradingTrajectoryDiscrete Constructor => Invalid Inputs");
	}

	@Override public double marketPower()
	{
		return _dblMarketPower;
	}

	@Override public double transactionCostExpectation()
	{
		return _dblTransactionCostExpectation;
	}

	@Override public double transactionCostVariance()
	{
		return _dblTransactionCostVariance;
	}
}
